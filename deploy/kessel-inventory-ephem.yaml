apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: inventory
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: inventory-api-config
    data:
      inventory-api-config.yaml: |
        storage:
          disable-persistence: false
        authn:
          allow-unauthenticated: true
        authz:
          kessel:
            insecure-client: true
            enable-oidc-auth: false
        consumer:
          enabled: true
          bootstrap-servers: inventory-kafka-kafka-bootstrap:9092
          topic: outbox.event.kessel.tuples
          retry-options:
            consumer-max-retries: -1
            operation-max-retries: -1
            backoff-factor: 5
            max-backoff-seconds: 30
          auth:
            enabled: false
            security-protocol: sasl_plaintext
            sasl-mechanism: SCRAM-SHA-512
            sasl-username: inventory-consumer
            sasl-password: REPLACE_ME
        consistency:
          read-after-write-enabled: true # false == off for all service providers
          read-after-write-allowlist: ["*"] # specify ["*"] to allow any request to optionally r-a-w
        log:
          level: "debug"

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: resources-tarball
    binaryData:
        resources.tar.gz: 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

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: connector-configuration-role
    rules:
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get"]

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: connector-configuration-rolebinding
    subjects:
    - kind: ServiceAccount
      name: inventory-kafka-connect-connect
    roleRef:
      kind: Role
      name: connector-configuration-role
      apiGroup: rbac.authorization.k8s.io

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: Kafka
    metadata:
      name: inventory-kafka
    spec:
      entityOperator:
        template:
          pod:
            metadata:
              labels:
                service: strimziKafka
          topicOperatorContainer:
            env:
            - name: STRIMZI_USE_FINALIZERS
              value: "false"
        tlsSidecar:
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
        topicOperator:
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 250Mi
        userOperator:
          resources:
            limits:
              cpu: 400m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 250Mi
      kafka:
        config:
          offsets.topic.replication.factor: "1"
        jvmOptions: {}
        listeners:
        - name: tcp
          port: 9092
          tls: false
          type: internal
        - name: secure
          port: 9094
          tls: false
          type: internal
          authentication:
            type: scram-sha-512
        replicas: 1
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 600Mi
        storage:
          type: ephemeral
        template:
          perPodService:
            metadata:
              labels:
                service: strimziKafka
          pod:
            metadata:
              labels:
                service: strimziKafka
        version: 3.7.0
      zookeeper:
        replicas: 1
        resources:
          limits:
            cpu: 350m
            memory: 800Mi
          requests:
            cpu: 200m
            memory: 400Mi
        storage:
          type: ephemeral
        template:
          nodesService:
            metadata:
              labels:
                service: strimziKafka
          pod:
            metadata:
              labels:
                service: strimziKafka

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaTopic
    metadata:
      name: "outbox.event.kessel.tuples"
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      partitions: 1
      replicas: 1
      topicName: "outbox.event.kessel.tuples"

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaTopic
    metadata:
      name: "outbox.event.kessel.resources"
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      partitions: 1
      replicas: 1
      topicName: "outbox.event.kessel.resources"

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaUser
    metadata:
      name: inventory-consumer
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      authentication:
        type: scram-sha-512

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaConnect
    metadata:
      annotations:
        strimzi.io/use-connector-resources: "true"
      generation: 1
      name: inventory-kafka-connect
    spec:
      bootstrapServers: inventory-kafka-kafka-bootstrap:9094
      authentication:
        type: scram-sha-512
        username: inventory-consumer
        passwordSecret:
          secretName: inventory-consumer
          password: password
      config:
        config.storage.replication.factor: "1"
        config.storage.topic: connect-cluster-configs
        connector.client.config.override.policy: All
        group.id: connect-cluster
        offset.storage.replication.factor: "1"
        offset.storage.topic: connect-cluster-offsets
        status.storage.replication.factor: "1"
        status.storage.topic: connect-cluster-status
        config.providers: secrets
        config.providers.secrets.class: io.strimzi.kafka.KubernetesSecretConfigProvider
      image: quay.io/cloudservices/kafka-connect:latest
      replicas: 1
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 512Mi
      template:
        pod:
          imagePullSecrets:
          - name: quay-cloudservices-pull
      version: 3.7.0

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaConnector
    metadata:
      name: kessel-inventory-source-connector
      labels:
        strimzi.io/cluster: inventory-kafka-connect
    spec:
      class: io.debezium.connector.postgresql.PostgresConnector
      tasksMax: ${{MAX_TASKS}}
      config:
        database.server.name: kessel-inventory-db
        database.dbname: ${secrets:kessel-inventory-db:db.name}
        database.hostname: ${secrets:kessel-inventory-db:db.host}
        database.port: ${secrets:kessel-inventory-db:db.port}
        database.user: ${secrets:kessel-inventory-db:db.user}
        database.password: ${secrets:kessel-inventory-db:db.password}
        topic.prefix: kessel-inventory
        table.whitelist: public.outbox_events # Required for Debezium < v1.3.0 support
        table.include.list: public.outbox_events # Required for Debezium > v1.3.0
        transforms: outbox
        transforms.outbox.type: io.debezium.transforms.outbox.EventRouter
        transforms.outbox.table.fields.additional.placement: operation:header, txid:header
        transforms.outbox.table.expand.json.payload: true
        value.converter: org.apache.kafka.connect.json.JsonConverter
        plugin.name: pgoutput
        heartbeat.interval.ms: ${DEBEZIUM_HEARTBEAT_INTERVAL_MS}
        heartbeat.action.query: ${DEBEZIUM_ACTION_QUERY}
        topic.heartbeat.prefix: ${TOPIC_HEARTBEAT_PREFIX}
        poll.interval.ms: ${DEBEZIUM_POLL_INTERVAL_MS}

  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: kessel-inventory
    spec:
      envName: ${ENV_NAME}
      database:
        name: kessel-inventory
        version: 16
      optionalDependencies:
        - kessel-relations
      deployments:
        - name: api
          replicas: ${{REPLICAS}}
          podSpec:
            initContainers:
            - name: copy-resources
              image: busybox
              imagePullPolicy: Always
              command:
                - /bin/sh
                - "-c"
                - |
                  echo "Extracting resources from tarball..."
                  tar -xzf /mnt/resources/resources.tar.gz -C /data/schema/resources
                  echo "Extraction complete!"
              volumeMounts:
                - name: resources-tarball
                  mountPath: "/mnt/resources"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
            - name: migration
              image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              command: ["inventory-api"]
              args: ["migrate"]
              inheritEnv: true
            image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
            imagePullPolicy: Always
            command: ["inventory-api"]
            args: ["serve"]
            livenessProbe:
              httpGet:
                path: /api/inventory/v1/livez
                port: 8000
            readinessProbe:
              httpGet:
                path: /api/inventory/v1/readyz
                port: 8000
            env:
            - name: CLOWDER_ENABLED
              value: "true"
            - name: INVENTORY_API_CONFIG
              value: "/inventory/inventory-api-config.yaml"
            - name: PGDATA
              value: /temp/data
            - name: RESOURCE_DIR
              value: "/data/schema/resources"
            volumeMounts:
                - name: config-volume
                  mountPath: "/inventory"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
                - name: resources-tarball
                  mountPath: "/mnt/resources"
            volumes:
              - name: config-volume
                configMap:
                  name: inventory-api-config
              - name: resource-volume
                emptyDir: { }
              - name: resources-tarball
                configMap:
                  name: resources-tarball
          webServices:
            public:
              enabled: true
              apiPath: inventory
      testing:
        iqePlugin: kessel-inventory

parameters:
  - description: ClowdEnvironment name (ephemeral, stage, prod)
    name: ENV_NAME
    required: true
  - description: App Image
    name: INVENTORY_IMAGE
    value: quay.io/redhat-services-prod/project-kessel-tenant/kessel-inventory/inventory-api
  - description: Image Tag
    name: IMAGE_TAG
    required: true
    value: latest
  - description: Number of replicas
    name: REPLICAS
    value: "1"
  - name: KAFKA_CONNECT_INSTANCE
    value: inventory-kafka-connect
    description: Name of the target Kafka Connect instance for Connector
  - name: MAX_TASKS
    value: "1"
    description: How many tasks the Kafka Connect instance can create to process this Connector's work
  - name: TOPIC_HEARTBEAT_PREFIX
    value: debezium-heartbeat
    description: Prefix for the connector heartbeat topic
  - name: DEBEZIUM_ACTION_QUERY
    value: "SELECT pg_logical_emit_message(false, 'heartbeat', now()::varchar);"
    description: Query action that runs for each heartbeat event
  - name: DEBEZIUM_HEARTBEAT_INTERVAL_MS
    value: "300000"
    description: The interval for the Debezium heartbeat in ms
  - name: DEBEZIUM_POLL_INTERVAL_MS
    value: "250"
    description: The interval for the Debezium batch processing
