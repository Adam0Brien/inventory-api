apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: inventory
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: inventory-api-config
    data:
      inventory-api-config.yaml: |
        storage:
          disable-persistence: false
          max-serialization-retries: 10
        authn:
          allow-unauthenticated: true
        authz:
          kessel:
            insecure-client: true
            enable-oidc-auth: false
        consumer:
          enabled: true
          bootstrap-servers: inventory-kafka-kafka-bootstrap:9092
          topic: outbox.event.kessel.tuples
          retry-options:
            consumer-max-retries: -1
            operation-max-retries: -1
            backoff-factor: 5
            max-backoff-seconds: 30
          auth:
            enabled: false
            security-protocol: sasl_plaintext
            sasl-mechanism: SCRAM-SHA-512
            sasl-username: inventory-consumer
            sasl-password: REPLACE_ME
        consistency:
          read-after-write-enabled: true # false == off for all service providers
          read-after-write-allowlist: ["*"] # specify ["*"] to allow any request to optionally r-a-w
        log:
          level: "debug"

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: resources-tarball
    binaryData:
        resources.tar.gz: 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

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: connector-configuration-role
    rules:
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get"]

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: connector-configuration-rolebinding
    subjects:
    - kind: ServiceAccount
      name: inventory-kafka-connect-connect
    roleRef:
      kind: Role
      name: connector-configuration-role
      apiGroup: rbac.authorization.k8s.io

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: Kafka
    metadata:
      name: inventory-kafka
    spec:
      entityOperator:
        template:
          pod:
            metadata:
              labels:
                service: strimziKafka
          topicOperatorContainer:
            env:
            - name: STRIMZI_USE_FINALIZERS
              value: "false"
        tlsSidecar:
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
        topicOperator:
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 250Mi
        userOperator:
          resources:
            limits:
              cpu: 400m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 250Mi
      kafka:
        config:
          offsets.topic.replication.factor: "1"
        jvmOptions: {}
        listeners:
        - name: tcp
          port: 9092
          tls: false
          type: internal
        - name: secure
          port: 9094
          tls: false
          type: internal
          authentication:
            type: scram-sha-512
        replicas: 1
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 600Mi
        storage:
          type: ephemeral
        template:
          perPodService:
            metadata:
              labels:
                service: strimziKafka
          pod:
            metadata:
              labels:
                service: strimziKafka
        version: 3.7.0
      zookeeper:
        replicas: 1
        resources:
          limits:
            cpu: 350m
            memory: 800Mi
          requests:
            cpu: 200m
            memory: 400Mi
        storage:
          type: ephemeral
        template:
          nodesService:
            metadata:
              labels:
                service: strimziKafka
          pod:
            metadata:
              labels:
                service: strimziKafka

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaTopic
    metadata:
      name: "outbox.event.kessel.tuples"
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      partitions: 1
      replicas: 1
      topicName: "outbox.event.kessel.tuples"

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaTopic
    metadata:
      name: "outbox.event.kessel.resources"
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      partitions: 1
      replicas: 1
      topicName: "outbox.event.kessel.resources"

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaUser
    metadata:
      name: inventory-consumer
      labels:
        strimzi.io/cluster: inventory-kafka
    spec:
      authentication:
        type: scram-sha-512

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaConnect
    metadata:
      annotations:
        strimzi.io/use-connector-resources: "true"
      generation: 1
      name: inventory-kafka-connect
    spec:
      bootstrapServers: inventory-kafka-kafka-bootstrap:9094
      authentication:
        type: scram-sha-512
        username: inventory-consumer
        passwordSecret:
          secretName: inventory-consumer
          password: password
      config:
        config.storage.replication.factor: "1"
        config.storage.topic: connect-cluster-configs
        connector.client.config.override.policy: All
        group.id: connect-cluster
        offset.storage.replication.factor: "1"
        offset.storage.topic: connect-cluster-offsets
        status.storage.replication.factor: "1"
        status.storage.topic: connect-cluster-status
        config.providers: secrets
        config.providers.secrets.class: io.strimzi.kafka.KubernetesSecretConfigProvider
      image: quay.io/cloudservices/kafka-connect:latest
      replicas: 1
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 512Mi
      template:
        pod:
          imagePullSecrets:
          - name: quay-cloudservices-pull
      version: 3.7.0

  - apiVersion: kafka.strimzi.io/v1beta2
    kind: KafkaConnector
    metadata:
      name: kessel-inventory-source-connector
      labels:
        strimzi.io/cluster: inventory-kafka-connect
    spec:
      class: io.debezium.connector.postgresql.PostgresConnector
      tasksMax: ${{MAX_TASKS}}
      config:
        database.server.name: kessel-inventory-db
        database.dbname: ${secrets:kessel-inventory-db:db.name}
        database.hostname: ${secrets:kessel-inventory-db:db.host}
        database.port: ${secrets:kessel-inventory-db:db.port}
        database.user: ${secrets:kessel-inventory-db:db.user}
        database.password: ${secrets:kessel-inventory-db:db.password}
        topic.prefix: kessel-inventory
        table.whitelist: public.outbox_events # Required for Debezium < v1.3.0 support
        table.include.list: public.outbox_events # Required for Debezium > v1.3.0
        transforms: outbox
        transforms.outbox.type: io.debezium.transforms.outbox.EventRouter
        transforms.outbox.table.fields.additional.placement: operation:header, txid:header
        transforms.outbox.table.expand.json.payload: true
        value.converter: org.apache.kafka.connect.json.JsonConverter
        plugin.name: pgoutput
        heartbeat.interval.ms: ${DEBEZIUM_HEARTBEAT_INTERVAL_MS}
        heartbeat.action.query: ${DEBEZIUM_ACTION_QUERY}
        topic.heartbeat.prefix: ${TOPIC_HEARTBEAT_PREFIX}
        poll.interval.ms: ${DEBEZIUM_POLL_INTERVAL_MS}

  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: kessel-inventory
    spec:
      envName: ${ENV_NAME}
      database:
        name: kessel-inventory
        version: 16
      optionalDependencies:
        - kessel-relations
      deployments:
        - name: api
          replicas: ${{REPLICAS}}
          podSpec:
            initContainers:
            - name: copy-resources
              image: busybox
              imagePullPolicy: Always
              command:
                - /bin/sh
                - "-c"
                - |
                  echo "Extracting resources from tarball..."
                  tar -xzf /mnt/resources/resources.tar.gz -C /data/schema/resources
                  echo "Extraction complete!"
              volumeMounts:
                - name: resources-tarball
                  mountPath: "/mnt/resources"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
            - name: migration
              image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              command: ["inventory-api"]
              args: ["migrate"]
              inheritEnv: true
            image: ${INVENTORY_IMAGE}:${IMAGE_TAG}
            imagePullPolicy: Always
            command: ["inventory-api"]
            args: ["serve"]
            livenessProbe:
              httpGet:
                path: /api/inventory/v1/livez
                port: 8000
            readinessProbe:
              httpGet:
                path: /api/inventory/v1/readyz
                port: 8000
            env:
            - name: CLOWDER_ENABLED
              value: "true"
            - name: INVENTORY_API_CONFIG
              value: "/inventory/inventory-api-config.yaml"
            - name: PGDATA
              value: /temp/data
            - name: RESOURCE_DIR
              value: "/data/schema/resources"
            volumeMounts:
                - name: config-volume
                  mountPath: "/inventory"
                - name: resource-volume
                  mountPath: "/data/schema/resources"
                - name: resources-tarball
                  mountPath: "/mnt/resources"
            volumes:
              - name: config-volume
                configMap:
                  name: inventory-api-config
              - name: resource-volume
                emptyDir: { }
              - name: resources-tarball
                configMap:
                  name: resources-tarball
          webServices:
            public:
              enabled: true
              apiPath: inventory
      testing:
        iqePlugin: kessel-inventory

parameters:
  - description: ClowdEnvironment name (ephemeral, stage, prod)
    name: ENV_NAME
    required: true
  - description: App Image
    name: INVENTORY_IMAGE
    value: quay.io/redhat-services-prod/project-kessel-tenant/kessel-inventory/inventory-api
  - description: Image Tag
    name: IMAGE_TAG
    required: true
    value: latest
  - description: Number of replicas
    name: REPLICAS
    value: "1"
  - name: KAFKA_CONNECT_INSTANCE
    value: inventory-kafka-connect
    description: Name of the target Kafka Connect instance for Connector
  - name: MAX_TASKS
    value: "1"
    description: How many tasks the Kafka Connect instance can create to process this Connector's work
  - name: TOPIC_HEARTBEAT_PREFIX
    value: debezium-heartbeat
    description: Prefix for the connector heartbeat topic
  - name: DEBEZIUM_ACTION_QUERY
    value: "SELECT pg_logical_emit_message(false, 'heartbeat', now()::varchar);"
    description: Query action that runs for each heartbeat event
  - name: DEBEZIUM_HEARTBEAT_INTERVAL_MS
    value: "300000"
    description: The interval for the Debezium heartbeat in ms
  - name: DEBEZIUM_POLL_INTERVAL_MS
    value: "250"
    description: The interval for the Debezium batch processing
