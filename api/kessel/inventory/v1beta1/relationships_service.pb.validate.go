// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kessel/inventory/v1beta1/relationships_service.proto

package v1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePolicyRelationshipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyRelationshipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyRelationshipRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePolicyRelationshipRequestMultiError, or nil if none found.
func (m *CreatePolicyRelationshipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyRelationshipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicyRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicyRelationshipRequestValidationError{
					field:  "PolicyRelationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicyRelationshipRequestValidationError{
					field:  "PolicyRelationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicyRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyRelationshipRequestValidationError{
				field:  "PolicyRelationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicyRelationshipRequestMultiError(errors)
	}

	return nil
}

// CreatePolicyRelationshipRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePolicyRelationshipRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePolicyRelationshipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyRelationshipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyRelationshipRequestMultiError) AllErrors() []error { return m }

// CreatePolicyRelationshipRequestValidationError is the validation error
// returned by CreatePolicyRelationshipRequest.Validate if the designated
// constraints aren't met.
type CreatePolicyRelationshipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyRelationshipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyRelationshipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyRelationshipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyRelationshipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyRelationshipRequestValidationError) ErrorName() string {
	return "CreatePolicyRelationshipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyRelationshipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyRelationshipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyRelationshipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyRelationshipRequestValidationError{}

// Validate checks the field values on CreatePolicyRelationshipResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePolicyRelationshipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyRelationshipResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePolicyRelationshipResponseMultiError, or nil if none found.
func (m *CreatePolicyRelationshipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyRelationshipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicyRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicyRelationshipResponseValidationError{
					field:  "PolicyRelationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicyRelationshipResponseValidationError{
					field:  "PolicyRelationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicyRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyRelationshipResponseValidationError{
				field:  "PolicyRelationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicyRelationshipResponseMultiError(errors)
	}

	return nil
}

// CreatePolicyRelationshipResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreatePolicyRelationshipResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicyRelationshipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyRelationshipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyRelationshipResponseMultiError) AllErrors() []error { return m }

// CreatePolicyRelationshipResponseValidationError is the validation error
// returned by CreatePolicyRelationshipResponse.Validate if the designated
// constraints aren't met.
type CreatePolicyRelationshipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyRelationshipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyRelationshipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyRelationshipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyRelationshipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyRelationshipResponseValidationError) ErrorName() string {
	return "CreatePolicyRelationshipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyRelationshipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyRelationshipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyRelationshipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyRelationshipResponseValidationError{}

// Validate checks the field values on UpdateResourceRelationshipByURNHsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateResourceRelationshipByURNHsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateResourceRelationshipByURNHsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateResourceRelationshipByURNHsRequestMultiError, or nil if none found.
func (m *UpdateResourceRelationshipByURNHsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceRelationshipByURNHsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResourceRelationshipByURNHsRequestValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResourceRelationshipByURNHsRequestValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResourceRelationshipByURNHsRequestValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPolicyRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResourceRelationshipByURNHsRequestValidationError{
					field:  "PolicyRelationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResourceRelationshipByURNHsRequestValidationError{
					field:  "PolicyRelationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicyRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResourceRelationshipByURNHsRequestValidationError{
				field:  "PolicyRelationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateResourceRelationshipByURNHsRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceRelationshipByURNHsRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateResourceRelationshipByURNHsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceRelationshipByURNHsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceRelationshipByURNHsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceRelationshipByURNHsRequestMultiError) AllErrors() []error { return m }

// UpdateResourceRelationshipByURNHsRequestValidationError is the validation
// error returned by UpdateResourceRelationshipByURNHsRequest.Validate if the
// designated constraints aren't met.
type UpdateResourceRelationshipByURNHsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceRelationshipByURNHsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceRelationshipByURNHsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceRelationshipByURNHsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceRelationshipByURNHsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceRelationshipByURNHsRequestValidationError) ErrorName() string {
	return "UpdateResourceRelationshipByURNHsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceRelationshipByURNHsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceRelationshipByURNHsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceRelationshipByURNHsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceRelationshipByURNHsRequestValidationError{}

// Validate checks the field values on UpdateResourceRelationshipByURNResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateResourceRelationshipByURNResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateResourceRelationshipByURNResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateResourceRelationshipByURNResponseMultiError, or nil if none found.
func (m *UpdateResourceRelationshipByURNResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceRelationshipByURNResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResourceRelationshipByURNResponseMultiError(errors)
	}

	return nil
}

// UpdateResourceRelationshipByURNResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateResourceRelationshipByURNResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceRelationshipByURNResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceRelationshipByURNResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceRelationshipByURNResponseMultiError) AllErrors() []error { return m }

// UpdateResourceRelationshipByURNResponseValidationError is the validation
// error returned by UpdateResourceRelationshipByURNResponse.Validate if the
// designated constraints aren't met.
type UpdateResourceRelationshipByURNResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceRelationshipByURNResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceRelationshipByURNResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceRelationshipByURNResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceRelationshipByURNResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceRelationshipByURNResponseValidationError) ErrorName() string {
	return "UpdateResourceRelationshipByURNResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceRelationshipByURNResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceRelationshipByURNResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceRelationshipByURNResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceRelationshipByURNResponseValidationError{}

// Validate checks the field values on DeleteResourceRelationshipByURNRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteResourceRelationshipByURNRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteResourceRelationshipByURNRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteResourceRelationshipByURNRequestMultiError, or nil if none found.
func (m *DeleteResourceRelationshipByURNRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceRelationshipByURNRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteResourceRelationshipByURNRequestValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteResourceRelationshipByURNRequestValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteResourceRelationshipByURNRequestValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteResourceRelationshipByURNRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceRelationshipByURNRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteResourceRelationshipByURNRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceRelationshipByURNRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceRelationshipByURNRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceRelationshipByURNRequestMultiError) AllErrors() []error { return m }

// DeleteResourceRelationshipByURNRequestValidationError is the validation
// error returned by DeleteResourceRelationshipByURNRequest.Validate if the
// designated constraints aren't met.
type DeleteResourceRelationshipByURNRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceRelationshipByURNRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceRelationshipByURNRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceRelationshipByURNRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceRelationshipByURNRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceRelationshipByURNRequestValidationError) ErrorName() string {
	return "DeleteResourceRelationshipByURNRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceRelationshipByURNRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceRelationshipByURNRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceRelationshipByURNRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceRelationshipByURNRequestValidationError{}

// Validate checks the field values on DeleteResourceRelationshipByURNResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteResourceRelationshipByURNResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteResourceRelationshipByURNResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteResourceRelationshipByURNResponseMultiError, or nil if none found.
func (m *DeleteResourceRelationshipByURNResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceRelationshipByURNResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResourceRelationshipByURNResponseMultiError(errors)
	}

	return nil
}

// DeleteResourceRelationshipByURNResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteResourceRelationshipByURNResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceRelationshipByURNResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceRelationshipByURNResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceRelationshipByURNResponseMultiError) AllErrors() []error { return m }

// DeleteResourceRelationshipByURNResponseValidationError is the validation
// error returned by DeleteResourceRelationshipByURNResponse.Validate if the
// designated constraints aren't met.
type DeleteResourceRelationshipByURNResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceRelationshipByURNResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceRelationshipByURNResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceRelationshipByURNResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceRelationshipByURNResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceRelationshipByURNResponseValidationError) ErrorName() string {
	return "DeleteResourceRelationshipByURNResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceRelationshipByURNResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceRelationshipByURNResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceRelationshipByURNResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceRelationshipByURNResponseValidationError{}
